import React from "react";
import { ScrollView, View, Text, StyleSheet } from "react-native";

import { Button } from "native-base";
import Icon from "react-native-vector-icons/FontAwesome";
import commonStyle from "../globalStyle";
import RNFetchBlob from "react-native-fetch-blob";
import ApkInstaller from "react-native-apk-installer";
import { utility } from "../utility";

import PopupDialog, {
  DialogTitle,
  SlideAnimation
} from "react-native-popup-dialog";

// import reqUrl from "../services/urlConfig";
import ProgressBar from "./ProgressBar";

const slideAnimation = new SlideAnimation({ slideFrom: "bottom" });

export default class extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      downloading: false
    };
  }
  show() {
    this.refs.popDialog.show();
  }
  hide() {
    this.refs.popDialog.dismiss();
  }
  downloadAPK() {
    this.setState({
      downloading: true,
      download: false
    });
    let downloadUrl =
      this.props.versionData && this.props.versionData.downloadUrl;
    if (!downloadUrl) {
      this.setState({
        downloading: false,
        download: false
      });
      utility.Toast("下载失败！");
      return;
    }
    RNFetchBlob.config({
      fileCache: true,
      timeout: 100000,
      appendExt: "apk"
    })
      .fetch("GET", downloadUrl, {})
      .progress((received, total) => {
        this.setState({
          received: (received / 1048576).toFixed(2),
          totalByte: total - 0,
          total: (total / 1048576).toFixed(2),
          progress: Math.floor(received / total * 100)
        });
      })
      .then(res => {
        let respType = res.respInfo.respType;
        if (respType === "json") {
          let status = res.respInfo.status;
          RNFetchBlob.fs.readFile(res.path(), "utf8").then(data => {
            let responseData = JSON.parse(data);
            let code = responseData.code;
            res.flush();
            if (code === 600) {
              utility.Toast("VIP用户课程，请前去开通VIP！");
            } else if (code === 402) {
              utility.Toast("该账户在其他地方登陆！");
              DeviceEventEmitter.emit("gotoLogin");
            } else if (code === 401) {
              utility.Toast("登陆失效，请重新登录！");
              DeviceEventEmitter.emit("gotoLogin");
            }
          });
        } else if (res && res.path()) {
          // 校验下载的文件大小
          RNFetchBlob.fs.stat(res.path()).then(stat => {
            if (this.state.totalByte == stat.size) {
              this.setState({
                downloading: false,
                downloaded: true,
                progress: 100
              });
              utility.Toast("下载成功，安装中...");
              this.apkPath = res.path();
              this.installAPK();
            } else {
              utility.Toast("网速太慢，下载失败，请重新下载！");
              res.flush();
              this.setState({
                downloaded: false,
                downloading: false
              });
            }
          });
        }
      })
      .catch((errorMessage, statusCode) => {
        utility.Toast("下载失败，请检查网络连接！", 2000);
        this.setState({
          status: -1
        });
      });
  }
  installAPK() {
    this.apkPath && ApkInstaller.install(this.apkPath);
  }
  render() {
    return (
      <PopupDialog
        ref="popDialog"
        width={400}
        height={300}
        dismissOnTouchOutside={false}
        dismissOnHardwareBackPress={false}
        dialogTitle={
          <DialogTitle
            titleStyle={{
              backgroundColor: commonStyle.color.primary,
              color: "#fff"
            }}
            titleTextStyle={{ color: "#fff" }}
            title="更新提示"
          />
        }
        dialogAnimation={slideAnimation}
      >
        <View style={styles.dialogBody}>
          <Text style={styles.descText}>
            检查到有新版本：{this.props.versionData &&
              this.props.versionData.version}
          </Text>
          <Text
            style={[
              styles.descText,
              {
                lineHeight: 24
              }
            ]}
            numberOfLines={2}
          >
            {this.props.versionData && this.props.versionData.content}
          </Text>
          <Text style={styles.descText}>是否立即更新到最新版本？</Text>
          <View
            style={[
              styles.dialogBtns,
              {
                display: this.state.downloading ? "none" : "flex"
              }
            ]}
          >
            <Button
              light
              style={[styles.btn]}
              onPress={() => {
                this.refs.popDialog.dismiss();
              }}
            >
              <Text style={[styles.btnText]}>取消</Text>
            </Button>
            <Button
              style={[
                styles.btn,
                {
                  backgroundColor: commonStyle.color.primary
                }
              ]}
              onPress={() => {
                if (this.state.downloaded) {
                  this.installAPK();
                } else {
                  this.downloadAPK();
                }
              }}
            >
              <Text style={[styles.btnText, { color: "#fff" }]}>
                {this.state.downloaded ? "立即安装" : "立即更新"}
              </Text>
            </Button>
          </View>
          <View
            style={[
              styles.downloading,
              {
                display: this.state.downloading ? "flex" : "none"
              }
            ]}
          >
            <Text style={{ marginRight: 20 }}>下载中</Text>
            <ProgressBar
              progress={this.state.progress || 0}
              barStyle={{ width: 200 }}
            />
          </View>
        </View>
      </PopupDialog>
    );
  }
}

const styles = StyleSheet.create({
  dialogBody: {
    padding: 10,
    flex: 1,
    position: "relative"
  },
  descText: {
    lineHeight: 30,
    fontSize: 16,
    alignSelf: "center",
    marginBottom: 10
  },
  dialogBtns: {
    marginTop: 30,
    width: 400,
    height: 60,
    flexDirection: "row",
    justifyContent: "space-around"
  },
  downloading: {
    marginTop: 30,
    width: 400,
    height: 60,
    flexDirection: "row",
    justifyContent: "center"
  },
  btn: {
    // alignSelf: "center",
    width: 150,
    height: 50,
    borderRadius: 10,
    justifyContent: "center"
  },
  btnText: {
    fontSize: 18
  }
});
