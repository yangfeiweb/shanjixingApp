/**
 * 初始化数据库、创建表
 * 同步表
 */
import React, { Component } from "react";
// import { ToastAndroid } from "react-native";
import SQLiteStorage from "react-native-sqlcipher-storage";
import entry from "./entity";
import DeviceInfo from "react-native-device-info";

SQLiteStorage.DEBUG(false);

var database_name = "shanjixing.db"; //数据库文件
var database_version = "1.0"; //版本号
var database_size = -1;
var db;
export default class extends Component {
  componentWillUnmount() {
    if (db) {
      db.close();
    } else {
    }
  }
  open() {
    return new Promise((resolve, reject) => {
      if (!db) {
        db = SQLiteStorage.openDatabase(
          {
            name: database_name,
            key: DeviceInfo.getUniqueID()
          },
          () => {
            resolve(db);
          },
          err => {
            reject();
          }
        );
      } else {
        resolve(db);
      }
    });
  }
  dropTable(tableName) {
    return new Promise((resolve, reject) => {
      this.open()
        .then(success => {
          let sqlArr = [];
          if (tableName) {
            sqlArr = [`drop TABLE IF EXISTS ${tableName}`];
          } else {
            sqlArr = [
              "drop TABLE IF EXISTS words",
              "drop TABLE IF EXISTS books",
              "drop TABLE IF EXISTS book_columns",
              "drop TABLE IF EXISTS columns",
              "drop TABLE IF EXISTS user_books",
              "drop TABLE IF EXISTS learning_record",
              "drop TABLE IF EXISTS column_schedule",
              "drop TABLE IF EXISTS right_words",
              "drop TABLE IF EXISTS error_words",
              "drop TABLE IF EXISTS exam_details",
              "drop TABLE IF EXISTS exam_record",
              "drop TABLE IF EXISTS exam_spell_details"
            ];
          }

          db.transaction(
            tx => {
              sqlArr.forEach(item => {
                tx.executeSql(item, [], (tx, results) => {}, err => {});
              });
            },
            err => {
              reject(err);
            },
            success => {
              resolve();
            }
          );
        })
        .catch(e => {
          reject(e);
        });
    });
  }

  // 创建表
  createTable() {
    return new Promise((resolve, reject) => {
      this.open()
        .then(success => {
          let sqlArr = [];
          // 创建单词库表
          sqlArr.push(
            `CREATE TABLE IF NOT EXISTS words (${this.getEntityCreateStr(
              entry.WORDS_ENTITY
            )})`
          );
          sqlArr.push(
            "CREATE UNIQUE INDEX IF NOT EXISTS word_no ON words(wordNo)"
          );

          // 创建课本库表
          sqlArr.push(
            `CREATE TABLE IF NOT EXISTS books (${this.getEntityCreateStr(
              entry.BOOKS_ENTITY
            )})`
          );
          sqlArr.push(
            `CREATE UNIQUE INDEX IF NOT EXISTS book_no ON books(bookNo)`
          );

          // 课本栏目对照表
          sqlArr.push(
            `CREATE TABLE IF NOT EXISTS book_columns (${this.getEntityCreateStr(
              entry.BOOK_COLUMNS_ENTITY
            )})`
          );
          sqlArr.push(
            `CREATE UNIQUE INDEX IF NOT EXISTS book_col_idx ON book_columns(bookNo, columnNo)`
          );

          // 栏目单词对照表
          sqlArr.push(
            `CREATE TABLE IF NOT EXISTS columns (id integer PRIMARY KEY AUTOINCREMENT, ${this.getEntityCreateStr(
              entry.COLUMNS_ENTITY
            )})`
          );
          sqlArr.push(
            `CREATE UNIQUE INDEX IF NOT EXISTS column_no ON columns(columnNo)`
          );

          // 用户学习课本表
          sqlArr.push(
            `CREATE TABLE IF NOT EXISTS user_books (id integer PRIMARY KEY AUTOINCREMENT, ${this.getEntityCreateStr(
              entry.USER_LEARN_BOOKS_ENTITY
            )})`
          );
          sqlArr.push(
            `CREATE UNIQUE INDEX IF NOT EXISTS user_book_idx ON user_books(studentNo, bookNo)`
          );

          // 用户学习记录表（每天按栏目记录）
          sqlArr.push(
            `CREATE TABLE IF NOT EXISTS learning_record (id integer PRIMARY KEY AUTOINCREMENT, ${this.getEntityCreateStr(
              entry.USER_LEARNING_ENTITY
            )})`
          );
          sqlArr.push(
            `CREATE UNIQUE INDEX IF NOT EXISTS learning_idx ON learning_record(studentNo, bookNo, columnNo, learnType, learnDate)`
          );

          // 用户栏目进度表
          sqlArr.push(
            `CREATE TABLE IF NOT EXISTS column_schedule (id integer PRIMARY KEY AUTOINCREMENT,${this.getEntityCreateStr(
              entry.USER_COLUMN_SCH_ENTITY
            )})`
          );
          sqlArr.push(
            `CREATE UNIQUE INDEX IF NOT EXISTS column_schedule_idx ON column_schedule(studentNo, bookNo, columnNo, learnType)`
          );

          // 用户正确词表
          sqlArr.push(
            `CREATE TABLE IF NOT EXISTS right_words (id integer PRIMARY KEY AUTOINCREMENT,${this.getEntityCreateStr(
              entry.USER_RIGHT_WRODS_ENTITY
            )})`
          );
          sqlArr.push(
            `CREATE UNIQUE INDEX IF NOT EXISTS right_idx ON right_words(studentNo, bookNo, columnNo, wordNo, learnType)`
          );

          // 用户错误词表
          sqlArr.push(
            `CREATE TABLE IF NOT EXISTS error_words (id integer PRIMARY KEY AUTOINCREMENT, ${this.getEntityCreateStr(
              entry.USER_ERR_WRODS_ENTITY
            )})`
          );
          sqlArr.push(
            `CREATE UNIQUE INDEX IF NOT EXISTS error_idx ON error_words(studentNo, bookNo, columnNo, wordNo, learnType)`
          );

          // 用户操作记录表
          sqlArr.push(
            `CREATE TABLE IF NOT EXISTS client_record (id integer PRIMARY KEY AUTOINCREMENT, ${this.getEntityCreateStr(
              entry.CLIENT_RECORD
            )})`
          );
          sqlArr.push(
            `CREATE INDEX IF NOT EXISTS record_idx ON client_record(studentNo, createTime)`
          );
          // 用户测试详情表
          sqlArr.push(
            `CREATE TABLE IF NOT EXISTS exam_details (id integer PRIMARY KEY AUTOINCREMENT, ${this.getEntityCreateStr(
              entry.USER_EXAM_DETAIL
            )})`
          );
          sqlArr.push(
            `CREATE INDEX IF NOT EXISTS exam_details_id ON exam_details(examId)`
          );
          // 用户测试记录表
          sqlArr.push(
            `CREATE TABLE IF NOT EXISTS exam_record (id integer PRIMARY KEY AUTOINCREMENT,${this.getEntityCreateStr(
              entry.USER_EXAM_RECORD
            )})`
          );

          // 用户拼写测试详情表
          sqlArr.push(
            `CREATE TABLE IF NOT EXISTS exam_spell_details (id integer PRIMARY KEY AUTOINCREMENT, ${this.getEntityCreateStr(
              entry.USER_SPELL_EXAM_DETAIL
            )})`
          );
          sqlArr.push(
            `CREATE INDEX IF NOT EXISTS exam_spell_details_id ON exam_spell_details(examId)`
          );

          db.transaction(
            tx => {
              sqlArr.forEach(item => {
                tx.executeSql(item, [], (tx, results) => {}, err => {});
              });
            },
            err => {
              reject(err);
            },
            success => {
              resolve();
            }
          );
        })
        .catch(e => {
          reject(e);
        });
    });
  }

  getEntityCreateStr(entity) {
    let keys = [];
    entity.forEach(item => {
      keys.push(`${item.key} ${item.type || ""}`);
    });
    return keys.join(",");
  }
  // 批量插入数据
  insertData(table, data, columnsArr) {
    // 分组数据，大量数据同时插入会崩溃
    return new Promise((resolve, reject) => {
      this.open()
        .then(success => {
          let groupArr = [];
          let groupIdx = -1;
          let size = 500; //一次最多插入500条
          let groupItem = [];
          let count = data.length;
          if (count) {
            data.forEach((item, idx) => {
              if (idx % size == 0) {
                groupIdx++;
                groupItem = [];
                groupArr.push(groupItem);
              }
              groupItem.push(item);
            });
          } else {
            data = [data];
            groupArr.push(data);
          }
          if (!columnsArr) {
            columnsArr = [];
            let firstRow = data[0];
            for (let key in data[0]) {
              columnsArr.push(key);
            }
          }
          let groupCount = groupArr.length;
          let operateCount = 0;
          groupArr.forEach((item, itemIdx) => {
            let itemLen = item.length;
            db.transaction(
              tx => {
                for (let i = 0; i < itemLen; i++) {
                  let itemInfo = item[i];
                  let valArr = [];
                  let infoStr = "";
                  columnsArr.forEach(key => {
                    let val = itemInfo[key];
                    if (val === undefined) {
                      val = "";
                    } else {
                      if (typeof val === "string") {
                        val = val.replace(/"/g, '""');
                      }
                    }
                    if (typeof val === "string") {
                      valArr.push(`"${val}"`);
                    } else {
                      valArr.push(`${val}`);
                    }
                  });
                  valStr = valArr.join(",");
                  let sql =
                    `replace into ${table} (${columnsArr.join(",")})  VALUES(` +
                    valStr +
                    ")";
                  tx.executeSql(sql, null, () => {}, err => {});
                }
              },
              error => {
                operateCount++;
                if (operateCount === groupCount) {
                  reject();
                }
              },
              () => {
                operateCount++;
                if (operateCount === groupCount) {
                  resolve();
                }
              }
            );
          });
        })
        .catch(e => {
          reject(e);
        });
    });
  }

  // 获取表数据
  getTableData(table, conditions) {
    return new Promise((resolve, reject) => {
      this.open().then(success => {
        let sqlStr =
          "select * from " +
          table +
          (conditions != undefined && conditions != ""
            ? ` where ${conditions}`
            : "");
        db.transaction(tx => {
          tx.executeSql(
            sqlStr,
            [],
            (tx, results) => {
              resolve(results.rows);
            },
            err => {
              reject(false);
            }
          );
        });
      });
    });
  }

  // 执行sql
  executeSql(sqlStr) {
    return new Promise((resolve, reject) => {
      this.open().then(success => {
        db.transaction(tx => {
          tx.executeSql(
            sqlStr,
            [],
            (tx, results) => {
              let result = results.rows;
              let data = [];
              let len = result.length;
              for (let i = 0; i < len; i++) {
                data.push(result.item(i));
              }
              resolve(data);
            },
            err => {
              reject(false);
            }
          );
        });
      });
    });
  }

  getTransaction() {
    return new Promise((resolve, reject) => {
      this.open().then(success => {
        resolve(db.transaction);
      });
    });
  }

  // 批量执行sql
  executeBatchSql(sqlArr) {
    return new Promise((resolve, reject) => {
      this.open().then(success => {
        db.transaction(
          tx => {
            sqlArr.forEach(sqlStr => {
              tx.executeSql(sqlStr, [], (tx, results) => {}, err => {});
            });
          },
          err => {
            reject(err);
          },
          success => {
            resolve();
          }
        );
      });
    });
  }

  // 获取数据数量
  getTableDataCount(table, conditions) {
    return new Promise((resolve, reject) => {
      this.open().then(success => {
        let sqlStr =
          "select count(*) as count from " +
          table +
          (conditions != undefined && conditions != ""
            ? ` where ${conditions}`
            : "");
        db.transaction(tx => {
          tx.executeSql(
            sqlStr,
            [],
            (tx, results) => {
              let dataItem = results.rows.item(0);
              resolve(dataItem.count);
            },
            err => {
              reject(false);
            }
          );
        });
      });
    });
  }

  updateLearnType() {
    let sqlArr = [];
    sqlArr.push(
      `update learning_record set learnType='DEFAULT' where learnType='default'`
    );
    sqlArr.push(
      `update column_schedule set learnType='DEFAULT' where learnType='default'`
    );
    sqlArr.push(
      `update right_words set learnType='DEFAULT' where learnType='default'`
    );
    sqlArr.push(
      `update error_words set learnType='DEFAULT' where learnType='default'`
    );
    return this.executeBatchSql(sqlArr);
  }

  modifyTables() {
    // 用户课本表--添加 版本号、学习类型、更新时间
    this.executeSql(`ALTER TABLE user_books ADD versionCode integer`)
      .then(() => {})
      .catch(e => {});
    this.executeSql(`ALTER TABLE user_books ADD learnType`)
      .then(() => {})
      .catch(e => {});
    this.executeSql(`ALTER TABLE user_books ADD updateTime`)
      .then(() => {})
      .catch(e => {});

    // 用户测试记录表--添加 同步标识、课本编号
    this.executeSql(`ALTER TABLE exam_record ADD synced integer`)
      .then(() => {})
      .catch(e => {});
    this.executeSql(`ALTER TABLE exam_record ADD bookNo`)
      .then(() => {})
      .catch(e => {});

    // 用户测试记录详情表--添加 栏目编号、完成时间
    this.executeSql(`ALTER TABLE exam_details ADD columnNo`)
      .then(() => {})
      .catch(e => {});
    this.executeSql(`ALTER TABLE exam_details ADD finishedTime`)
      .then(() => {})
      .catch(e => {});
  }

  updataRecordExamType() {
    return new Promise((resolve, reject) => {
      this.getTableData("exam_record").then(
        res => {
          if (res.length > 0) {
            let records = res.raw();
            let sqls = records.map(item => {
              if (item) {
                let examType = "";
                if (item.examType === "word_test") {
                  examType = "WORD";
                } else if (item.examType === "learn_before_test") {
                  examType = "COLUMN_WORD_BEFORE";
                } else if (item.examType === "learn_after_test") {
                  examType = "COLUMN_WORD_BEFORE";
                }
                if (examType) {
                  return `update exam_record set examType='${examType}' where id=${
                    item.id
                  }`;
                }
                return "";
              }
            });
            sqls.push(
              `update exam_details set answerItem="" where answerItem="none"`
            );
            this.executeBatchSql(sqls).then(
              res => {
                resolve(res);
              },
              err => {
                reject(err);
              }
            );
          }
        },
        err => {
          reject(err);
        }
      );
    });
  }
  close() {
    if (db) {
      db.close();
    }
    db = null;
  }
  render() {
    return null;
  }
}
