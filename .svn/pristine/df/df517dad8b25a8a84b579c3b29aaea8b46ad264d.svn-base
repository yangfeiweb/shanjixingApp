import React, { Component } from "react";
import { View, ImageBackground, Image, StyleSheet, TouchableOpacity,AsyncStorage} from "react-native";
import { NavigationActions } from "react-navigation";
import { Container, Content, Text } from "native-base";
import FAIcons from "react-native-vector-icons/FontAwesome"; //remove
import Icons from "react-native-vector-icons/Ionicons"; //ios-add-circle-outline
import globalStyle from "../../globalStyle";
import { auth } from "../../controller";
import { Loading } from "../../components";
import { userDB } from "../../db";
// const db = new userDB()
export default class extends Component {
    constructor(props) {
        super(props)
        this.loading = null
        this._renderList = this._renderList.bind(this)
    }
    state = {
        userList: [],
        opacity: 0
    }
    componentDidMount() {
        this.loading.show()
        AsyncStorage.getItem("usersInfo").then((res)=>{
            this.loading.hide()
            if(!res){
                this.jumpLogin("Login")
            }else{
                let data = JSON.parse(res)
                data.push({ mobile: "add" })
                this.setState({ userList: data })
            }
        }).catch((err)=>{
            this.loading.hide()
            this.jumpLogin("Login")
        })
        // db.getTableData().then((res) => {
        //     this.loading.hide()
        //     if (res.length === 0) {
        //         this.jumpLogin("Login")
        //     } else {
        //         let data = res.raw()
        //         data.push({ mobile: "add" })
        //         this.setState({ userList: data })
        //     }
        // }, err => {
        //     this.loading.hide()
        //     this.jumpLogin("Login")
        // })
    }
    jumpLogin(name) {
        let { state, dispatch } = this.props.navigation
        let replace = NavigationActions.replace({
            key: state.params.key,
            routeName: name
        })
        dispatch(replace)
    }
    login(item) {
        this.loading.show()
        auth.doLogin(item.mobile, item.password).then(res => {
            let code = res.code;
            let msg = res.msg;
            if (code === 200) {
                this.jumpLogin("Home")
            }
            this.loading.hide()
        }, err => {
            this.loading.hide()
        })
    }
    remove(item) {

    }
    showRemoveIcon() {

    }

    _renderList(item, index) {
        let component = null
        if (item.mobile !== "add") {
            component = (<View style={styles.itemBox} key={index}>
                <TouchableOpacity activeOpacity={1} onPress={() => { this.remove(item) }} style={[styles.removeIcon, { opacity: this.state.opacity }]}>
                    <FAIcons name="remove" color={globalStyle.color.danger} size={30} ></FAIcons>
                </TouchableOpacity>
                <TouchableOpacity onLongPress={() => { }} style={styles.headContainer} activeOpacity={1} onPress={() => { this.login(item) }}>
                    <Image source={{ uri: "https://www.baidu.com/img/bd_logo1.png" }} style={{ width: 100, height: 100 }}></Image>
                </TouchableOpacity>
                <Text style={{ marginTop: 5 }}>{item.mobile}</Text>
            </View>)
        } else {
            component = (<View style={styles.itemBox} key={index} activeOpacity={1}>
                <TouchableOpacity onPress={() => { this.jumpLogin("Login") }} style={{ alignItems: "center", justifyContent: "center" }}>
                    <Icons name="ios-add-circle-outline" size={115} color={globalStyle.color.primary}></Icons>
                </TouchableOpacity>
                <Text style={{}}>新用户登录</Text>
            </View>)
        }
        return component
    }
    render() {
        return (
            <Container>
                <ImageBackground source={require("../../assets/images/login-background.png")} resizeMode={Image.resizeMode.stretch} style={{ width: "100%", height: "100%" }}>
                    <Image source={require("../../assets/images/shanjixing.png")} style={styles.image} />
                    <View style={styles.container}>
                        <View style={styles.scrollBox}>
                            <Content horizontal={true} showsHorizontalScrollIndicator={false} contentContainerStyle={styles.content}>
                                {
                                    this.state.userList.map(this._renderList)
                                }
                            </Content>
                        </View>
                    </View>
                </ImageBackground>
                <Loading ref={(ref) => { this.loading = ref }}></Loading>
            </Container>
        )
    }
}

const styles = StyleSheet.create({
    container: {
        flex: 1, alignItems: "center", justifyContent: "center"
    },
    removeIcon: {
        position: "absolute",
        top: 5,
        right: 5
    },
    scrollBox: {
        width: "100%",
        height: "40%",
        backgroundColor: "rgba(255,255,255,0.5)",
        justifyContent: "center",
        alignItems: "center",
    },
    image: {
        position: "absolute",
        top: 5,
        left: 5,
        width: "15%",
        height: "10%"
    },
    content: {
        height: "100%",
        justifyContent: "center",
        alignItems: "center",
    },
    itemBox: {
        width: 150,
        height: 150,
        marginLeft: 20,
        // backgroundColor: "#fff",
        justifyContent: "center",
        alignItems: "center",
    },
    headContainer: {
        width: 100,
        height: 100,
        marginVertical: 4,
        overflow: "hidden",
        borderRadius: 50,
        shadowOffset: { width: 0, height: 0 },
        shadowColor: '#5ABEFF',
        shadowOpacity: 0.7,
        shadowRadius: 2,
        elevation: 4,
    }
})