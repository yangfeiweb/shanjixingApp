import React from "react";
import {
  ScrollView,
  View,
  Text,
  StyleSheet,
  ART,
  TouchableOpacity,
  Slider
} from "react-native";

import { Button, Radio } from "native-base";
import Icon from "react-native-vector-icons/FontAwesome";
import commonStyle from "../../../globalStyle";
import Sound from "react-native-sound";

import PopupDialog, {
  DialogTitle,
  DialogButton,
  SlideAnimation
} from "react-native-popup-dialog";

const slideAnimation = new SlideAnimation({ slideFrom: "bottom" });

export default class extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      playing: false,
      currMusic: 0,
      volume: 0.5
    };
    this.musicSound = null;
    this.basePath = Sound.MAIN_BUNDLE;
  }
  componentDidMount() {
    this.musicArr = [
      {
        title: "alpha1",
        url: "alpha1.mp3"
      },
      {
        title: "alpha2",
        url: "alpha2.mp3"
      },
      {
        title: "alpha3",
        url: "alpha3.mp3"
      },
      {
        title: "alpha4",
        url: "alpha4.mp3"
      },
      {
        title: "alpha5",
        url: "alpha5.mp3"
      }
    ];
  }
  loadMusic() {
    if (this.musicSound) {
      this.musicSound.release();
    }
    let soundInfo = this.musicArr[this.state.currMusic];
    this.musicSound = new Sound(soundInfo.url, this.basePath, err => {
      if (!err) {
        this.props.onPlayMusic && this.props.onPlayMusic(true);
        this.setState({
          playing: true
        });
        this.musicSound.play();
      }
    });
    this.musicSound.setVolume(this.state.volume);
  }
  playMusic() {
    this.props.onPlayMusic && this.props.onPlayMusic(true);
    this.setState({
      playing: true
    });
    if (this.musicSound) {
      this.musicSound.play();
    } else {
      this.loadMusic();
    }
  }
  pauseMusic() {
    this.musicSound && this.musicSound.pause();
  }
  backward() {
    let curr = this.state.currMusic;
    if (curr === 0) {
      curr = this.musicArr.length - 1;
    } else {
      curr = curr - 1;
    }
    this.setState(
      {
        currMusic: curr
      },
      () => {
        this.loadMusic();
      }
    );
  }
  next() {
    let curr = this.state.currMusic;
    if (curr === this.musicArr.length - 1) {
      curr = 0;
    } else {
      curr = curr + 1;
    }
    this.setState(
      {
        currMusic: curr
      },
      () => {
        this.loadMusic();
      }
    );
  }
  show() {
    this.refs.popDialog.show();
  }
  render() {
    return (
      <PopupDialog
        ref="popDialog"
        width={400}
        height={260}
        dialogTitle={
          <DialogTitle
            titleStyle={{
              backgroundColor: commonStyle.color.primary,
              color: "#fff"
            }}
            titleTextStyle={{ color: "#fff" }}
            title="α脑波记忆"
          />
        }
        dialogAnimation={slideAnimation}
      >
        <View style={styles.dialogBody}>
          <Text style={{ alignSelf: "center", marginBottom: 10 }}>
            开启α脑波记忆，进入右脑状态...
          </Text>
          <Text style={{ alignSelf: "center", marginBottom: 10 }}>
            让大脑清醒且放松，注意力更集中！
          </Text>
          <View style={styles.controls}>
            <TouchableOpacity
              onPress={() => {
                this.backward();
              }}
            >
              <Icon name="step-backward" style={styles.controlIcon} />
            </TouchableOpacity>
            <TouchableOpacity
              onPress={() => {
                if (this.state.playing) {
                  this.props.onPlayMusic && this.props.onPlayMusic(false);
                  this.pauseMusic();
                  this.setState({
                    playing: false
                  });
                } else {
                  this.playMusic();
                }
              }}
            >
              <Icon
                name={this.state.playing ? "pause" : "play"}
                style={[
                  styles.controlIcon,
                  {
                    color: this.state.playing
                      ? commonStyle.color.primary
                      : commonStyle.color.danger
                  }
                ]}
              />
            </TouchableOpacity>
            <TouchableOpacity
              onPress={() => {
                this.next();
              }}
            >
              <Icon name="step-forward" style={styles.controlIcon} />
            </TouchableOpacity>
          </View>
          <View style={styles.volumeControl}>
            <Icon
              name={
                this.state.volume < 0.2
                  ? "volume-off"
                  : this.state.volume < 0.7 ? "volume-down" : "volume-up"
              }
              style={{
                fontSize: 30,
                width: 30,
                color: "#999"
              }}
            />
            <Slider
              style={styles.volume}
              value={50}
              step={1}
              minimumValue={0}
              maximumValue={100}
              minimumTrackTintColor={commonStyle.color.primary}
              maximumTrackTintColor={"gray"}
              thumbTintColor={commonStyle.color.primary}
              onValueChange={val => {
                this.setState({
                  volume: val / 100
                });
                if (this.musicSound) {
                  this.musicSound.setVolume(val / 100);
                }
              }}
            />
          </View>
        </View>
      </PopupDialog>
    );
  }
  componentWillUnmount() {
    this.musicSound && this.musicSound.release();
  }
}

const styles = StyleSheet.create({
  dialogBody: {
    padding: 10,
    flex: 1,
    alignItems: "center"
  },
  timesInfos: {
    flexDirection: "row",
    flexWrap: "wrap",
    flex: 1
  },
  controls: {
    height: 70,
    width: "80%",
    flexDirection: "row",
    justifyContent: "space-around",
    alignItems: "center"
  },
  controlIcon: {
    color: "#666",
    fontSize: 30,
    width: 40
  },
  volumeControl: {
    height: 60,
    width: "100%",
    flexDirection: "row",
    justifyContent: "center",
    alignItems: "center"
  },
  volume: {
    width: 200
  },
  timesItem: {
    flexDirection: "row",
    width: 120,
    padding: 10,
    marginBottom: 10
  }
});
